ate     green eggs and ham, said “Sam I am.” Another great story and another great adventure

Answer: The cat in the hat

Note for the /c and /w options there is no space between the letter and the number. The option would be specified as -w15 NOT -w 15 or -c3 NOT -c 3. The other options have a space between the option and the input into that option, for example /d apple 3.  • For more information on usage statements read the following: How to write usage statements. o Note: The format of the above usage statements is slightly different than the format given at the above website, but the same principles apply. • Information on processing command-line arguments can be found at some of the C++ resources websites given in Moodle.  2. Words - The input file will consist of text, which may contain punctuation.   a. A word is defined as a string of one or more letters.  b. Apostrophes and hyphens are allowed, if they are surrounded by letters.  c. Other characters may separate words (e.g. commas, semi-colons), but are not part of a word.  d. A word could have multiple symbols at the beginning of the word, but these are not part of the word. For example, “#Hello there!” would be just the words hello and there. 3 of 6 e. The program should be case insensitive, e.g., This and this would be considered the same word. f. All displayed words should be in lower case. g. Duplicate words should not appear in the list of words twice, but instead should add to the frequency count for that word.  3. Infile – if the input file is not found the program should indicate so.  4. If the command entered to run the program at the prompt is incorrect, i.e., the command-line arguments are not correct. the usage statement must be displayed.  5. Output requirements  a. The frequency output must be in decreasing order. The frequency heading should state “Words occurring ? times”, where ? represents the frequency of the words. If there are no words of a particular frequency then that frequency should not be displayed. Within the frequency group the words should be output in alphabetic order. b. The output for alphabetic order should state “The words starting with ?” where ? is the letter the words start with. If there are no words that start with a particular letter then the nothing should be output at all for that letter.  c. All words output should be in lower-case with no surrounding punctuation. d. The output for all the words for a particular letter should be in the specified number of columns with the default value being four (4) columns. Each column should be left justified. e. The default output column width will be 18, but can be adjusted at the command-line.  6. Implementation requirements  a. You may store the words in the data structure of your choice. b. Use C++ constructs and not C constructs. i. For example, formatting of output should NOT be with printf statements, but instead use the C++ ostream library to format the output. c. The implementation needs to follow best program design and implementation practices such as separation of concerns, etc. d. Format the code using the ReSharper Code Cleanup, but only perform the Built-in: Reformat Code.  e. Make sure every public function has a function specification. This includes the main function and all stand-alone functions. 